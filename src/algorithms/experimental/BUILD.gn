# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Since this is experimental code, we restrict the visibility to this build file and to the
# archived build targets.
visibility = [
  ":*",
  "archived:*",
]

import("//build/test.gni")

source_set("hash") {
  sources = [
    "hash.cc",
    "hash.h",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]

  public_deps = [ "//third_party/boringssl" ]
}

source_set("hash_test") {
  testonly = true
  sources = [ "hash_test.cc" ]

  deps = [
    ":hash",
    "//third_party/gflags",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("count_min") {
  sources = [
    "count_min.cc",
    "count_min.h",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]

  deps = [
    ":hash",
    "$cobalt_root/src:logging",
  ]
}

source_set("count_min_test") {
  testonly = true
  sources = [ "count_min_test.cc" ]

  deps = [
    ":count_min",
    "//third_party/gflags",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("random") {
  sources = [ "random.h" ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("random_test") {
  testonly = true
  sources = [ "random_test.cc" ]

  deps = [
    ":random",
    "//third_party/gflags",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("distributions") {
  sources = [
    "distributions.cc",
    "distributions.h",
  ]

  deps = [ ":random" ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("distributions_test") {
  testonly = true
  sources = [ "distributions_test.cc" ]

  deps = [
    ":distributions",
    ":random",
    "//third_party/gflags",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("randomized_response") {
  sources = [
    "randomized_response.cc",
    "randomized_response.h",
  ]

  deps = [
    ":distributions",
    ":random",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("randomized_response_test") {
  testonly = true
  sources = [ "randomized_response_test.cc" ]

  deps = [
    ":random",
    ":randomized_response",
    "//third_party/gflags",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("integer_encoder") {
  sources = [
    "integer_encoder.cc",
    "integer_encoder.h",
  ]

  public_deps = [
    ":distributions",
    ":random",
    ":randomized_response",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("integer_encoder_test") {
  testonly = true
  sources = [ "integer_encoder_test.cc" ]

  deps = [
    ":integer_encoder",
    ":random",
    ":randomized_response",
    "//third_party/gflags",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("histogram_encoder") {
  sources = [
    "histogram_encoder.cc",
    "histogram_encoder.h",
  ]

  deps = [
    ":integer_encoder",
    ":random",
    ":randomized_response",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

source_set("histogram_encoder_test") {
  testonly = true
  sources = [ "histogram_encoder_test.cc" ]

  deps = [
    ":histogram_encoder",
    ":integer_encoder",
    ":random",
    "//third_party/gflags",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}

group("tests") {
  testonly = true
  deps = [
    ":count_min_test",
    ":distributions_test",
    ":hash_test",
    ":histogram_encoder_test",
    ":integer_encoder_test",
    ":random_test",
    ":randomized_response_test",
    "archived:tests",
  ]

  # Allow src/algorithms:tests to depend on this group.
  visibility = []
  visibility = [ "$cobalt_root/src/algorithms:tests" ]
}
